"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Association {
  type: String!
  quotation: String
  terms: [TermReference!]
  pages: Pages
}

type Dictionary {
  description: String
  subWords: [SubWord!]
  otherLangs: [Pronunciation!]
}

type IndexGuide {
  parentTerm: ID
  editions: IndexGuideEditions!
  inOtherLangs: [Pronunciation!]
}

type IndexGuideEditions {
  english1950: TermInfo
  english1992: TermInfo
}

type IndexTerm {
  id: ID!
  title: String!
  indexGuide: IndexGuide
  dictionary: Dictionary
}

type IndexTermsConnection {
  cursor: String
  hasMore: Boolean
  list: [IndexTerm!]
}

type Note {
  text: String
}

type Pages {
  pageNumbers: [Int!]
  specialPages: [SpecialPage!]
}

type Pronunciation {
  spelling: String
  phonetic: String
  sound: String
  lang: String
}

type Query {
  _empty: String
  termNotes(pageSize: Int, after: String): TermNotesConnection!
  termNote(id: Int): TermNote!
  indexTerms(pageSize: Int, after: String): IndexTermsConnection!
  indexTerm(id: ID): IndexTerm!
}

type SpecialPage {
  page: Int
  type: String
}

type SubWord {
  word: String
  description: String
  lang: String
}

type TermInfo {
  title: String
  pronunciation: Pronunciation
  associations: [Association!]
  usedThroughOut: Boolean
}

type TermNote {
  id: ID!
  title: String
  author: User
  notes: [Note]!
  pages: [Int]!
  tags: [String!]!
}

type TermNotesConnection {
  cursor: String!
  hasMore: Boolean!
  list: [TermNote!]!
}

type TermReference {
  id: ID
  title: String
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
}
